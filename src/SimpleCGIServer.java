import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.concurrent.Executors;

public class SimpleCGIServer {

	public static void main(String[] args) throws IOException {
		int port = 8000; // The server will listen on port 8000
		HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
		server.createContext("/", new ShellCommandHandler());
		server.setExecutor(Executors.newCachedThreadPool()); // creates a default executor
		server.start();
		System.out.println("Server is listening on port " + port);
	}

	static class ShellCommandHandler implements HttpHandler {
		@Override
		public void handle(HttpExchange exchange) throws IOException {
			String path = exchange.getRequestURI().getPath().substring(1); // Remove leading '/'
			String command = "java";
			String argument = path + ".java";

			// Read the request body
			InputStream requestBodyStream = exchange.getRequestBody();
			byte[] requestBodyBytes = requestBodyStream.readAllBytes();
			requestBodyStream.close();

			try {
				// Create a ProcessBuilder
				System.out.println("command: " + command + " " + argument);
				ProcessBuilder builder = new ProcessBuilder(command, argument);
				Process process = builder.start();

				// Pass the request body as the stdin to the process
				OutputStream processStdIn = process.getOutputStream();
				processStdIn.write(requestBodyBytes);
				processStdIn.close();

				process.waitFor();

				// Get the output from the command stdout and stderr
				String stdout = new String(process.getInputStream().readAllBytes());
				String stderr = new String(process.getErrorStream().readAllBytes());

				// Combine stdout and stderr for the response
				String combinedOutput = stdout + stderr;

				// Send the combined output as the response
				System.out.println("output: " + combinedOutput);
				sendResponse(exchange, combinedOutput, 200);
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
				sendResponse(exchange, "The command execution was interrupted.", 500); // Internal Server Error
			} catch (IOException e) {
				sendResponse(exchange, "Error executing the command: " + e.getMessage(), 500); // Internal Server Error
			}
		}

		private void sendResponse(HttpExchange exchange, String response, int statusCode) throws IOException {
			exchange.sendResponseHeaders(statusCode, response.getBytes().length);
			OutputStream os = exchange.getResponseBody();
			os.write(response.getBytes());
			os.close();
		}
	}
}
